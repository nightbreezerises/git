#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<stdlib.h>

//队列的链式实现
typedef struct LinkNode {
	int data;
	struct LinkNode* next;
}LinkNode;
typedef struct {
	LinkNode* front, * rear;
}LinkQuene;

//初始化队列（带头结点）
void InitQuene(LinkQuene& Q) {
	Q.front = Q.rear = (LinkNode*)malloc(sizeof(LinkNode));
	Q.front->next = NULL;
}

//判空
bool IsEmpty(LinkQuene Q) {
	if (Q.front == Q.rear)
		return true;
	else
		return false;
}

//新元素入队
void EnQuene(LinkQuene& Q, int x) {
	LinkNode* s = (LinkNode*)malloc(sizeof(LinkNode));
	s->data = x;
	s->next = NULL;
	Q.rear->next = s;
	Q.rear = s;
}

//出队
bool DeQuene(LinkQuene& Q, int& x) {
	if (Q.front == Q.rear)
		return false;
	LinkNode* p = Q.front->next;
	x = p->data;
	Q.front->next = p->next;
	if (Q.rear == p)//判断是否为最后一个结点出队
		Q.rear = Q.front;
	free(p);
	return true;
}

//队列的遍历
void PrintQuene(LinkQuene Q) {
	LinkNode* p = Q.front->next;
	printf("\n输出队列的所有元素\n");
	for (int i = 1; p != NULL; i++) {
		printf("第%d个元素为：%d\n", i,p->data);
		p = p->next;
	}
}

//功能测试
void testQuene(LinkQuene Q) {
	for (int i = 0, n; i < 10; i++) {//元素输入
		printf("请输入第%d个元素：", i + 1);
		scanf("%d", &n);
		EnQuene(Q, n);
	}
	PrintQuene(Q);
	int x = 1;
	DeQuene(Q,x);
	printf("删除的值为：%d\n", x);
	PrintQuene(Q);
}

int main() {
	LinkQuene Q;
	InitQuene(Q);
	testQuene(Q);
	return 0;
}