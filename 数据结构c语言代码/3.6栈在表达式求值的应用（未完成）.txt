#include<iostream>
#include<cstdlib>
#include<vector>
#include<stack>
#include<cmath>

using std::cout;
using std::cin;
using std::endl;
using std::string;
using std::stack;
using std::vector;



int get_num(string A) {
	if (A == "1")
		return 1;
	else if(A == "2")
		return 2;
	else if (A == "3")
		return 3;
	else if (A == "4")
		return 4;
	else if (A == "5")
		return 5;
	else if (A == "6")
		return 6;
	else if (A == "7")
		return 7;
	else if (A == "8")
		return 8;
	else if (A == "9")
		return 9;
	else if (A == "0")
		return 0;
}


//表达式求值expression evaluate
int exp_eva(string exp) {
	stack<int>nums;//操作数栈
	stack<string>exps;//表达式栈
	int i = 0, j;//表达式exp指针
	int n;//n为操作数
	string _operator;//操作符
	while (i <= exp.size()) {//当i等于字符串长度时停止循环
		//获取操作符
		for (j = i; j != exp.size(); ++j) {
			if (exp.substr(j, 1) == "+") {
				_operator = "+"; break;
			}
			if (exp.substr(j, 1) == "-") {
				_operator = "-"; break;
			}
			if (exp.substr(j, 1) == "*") {
				_operator = "*"; break;
			}
			if (exp.substr(j, 1) == "/") {
				_operator = "/"; break;
			}
		}
		//获取操作数
		n = 0;
		for (int k = 0; k < j - i; ++k)
			n += pow(10, k) * get_num(exp.substr(j - k - 1, 1));
		i = j + 1;//修改i的值
		if (i == exp.size() + 1){
			_operator = exps.top();//最后的处理
			if (_operator == "*" || _operator == "/")
				i -= 1;//当有乘号或除号时多循环一次
		}
		nums.push(n);//操作数入栈
		//操作数的运算
		if (_operator == "+" || _operator == "-") {
			//运算符栈不为空时弹出所有运算符
			string _op;
			while (!exps.empty()) {
				_op = exps.top(); exps.pop();//保存栈顶运算符并删除
				int s, d;//s，d分别为源操作数和目的操作数
				//两个操作数出栈
				s = nums.top(); nums.pop();
				d = nums.top(); nums.pop();
				//新的操作数入栈
				if (_op == "+") {
					nums.push(d + s);//d为被加数，s为加数
				}
				else if (_op == "-") {
					nums.push(d - s);//d为被减数，s为减数
				}
				else if (_op == "*") {
					nums.push(d * s);
				}
				else if (_op == "/") {
					nums.push(d / s);
				}
			}
			exps.push(_operator);//运算符栈为空时则入栈
		}
		else if (_operator == "*" || _operator == "/") {
			if (exps.empty())
				exps.push(_operator);
			else {
				string _op = exps.top();
				if (_op == "+" || _op == "-") {
					exps.push(_operator);
				}
				else if (_op == "*" || _op == "/") {
					exps.pop();//保存栈顶运算符并删除
					int s, d;//s，d分别为源操作数和目的操作数
					//两个操作数出栈
					s = nums.top(); nums.pop();
					d = nums.top(); nums.pop();
					//新的操作数入栈
					if (_op == "*") {
						nums.push(d * s);
					}
					else if (_op == "/") {
						nums.push(d / s);
					}
				}
			}
		}
	}
	return nums.top();//返回操作数栈顶元素
}

int main() {
	string expression;
	cin >> expression;
	cout << exp_eva(expression);
}
