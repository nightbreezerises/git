#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#define MAXLEN 255

//字符串定义
typedef struct {
	char ch[MAXLEN];
	int length;
}SString;

//字符串初始化
bool InitCh(SString& S) {
	S.ch[MAXLEN] = {0};//字符串清空操作
	S.length = 0;
}

//赋值操作
bool StrAssign(SString &T, SString S) {

}

//复制操作
bool StrCopy(SString& T, SString S) {

}

//判空操作
bool StrEmpty(SString S) {

}

//求串长
int StrLength(SString S) {

}

//清空操作
bool ClearString(SString &S) {

}

//销毁串
bool DestoryString(SString &S) {

}

//串联接
bool Concat(SString& T, SString S1, SString S2) {

}

//求子串
bool SubString(SString& Sub, SString S, int pos, int len) {
	if (pos + len - 1 > S.length)
		return false;//数组范围越界
	for (int i = pos; i < pos + len; i++) {
		Sub.ch[i - pos + 1] = S.ch[i];
	}
	Sub.length = len;
	return true;
}

//比较操作（由返回值大于0，等于0，小于0来判断）
int StrCompare(SString S, SString T) {
	for (int i = 1; i <= S.length && i <= T.length; i++) {
		if (S.ch[i] != T.ch[i])
			return S.ch[i] - T.ch[i];
	}
	return S.length - T.length;
}

//定位操作
int Index(SString S, SString T) {
	int i = 1, n = StrLength(S), m = StrLength(T);
	SString sub;//用于暂存字串
	while (i <= n - m + 1) {
		SubString(sub, S, i, m);
		if (StrCompare(sub, T) != 0)++i;
		else return i;
	}
	return 0;
}

//朴素模式匹配算法
int Index1(SString S, SString T) {
	int i = 1, j = 1;
	while (i <= S.length && j < T.length) {
		if (S.ch[i] == T.ch[j]) {
			++i;
			++j;
		}
		else {
			i = i - j + 2;
			j = 1;
		}
	}
	if (j > T.length)
		return i - T.length;
	else
		return 0;
}

int main() {


	return 0;
}