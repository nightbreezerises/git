#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<math.h>

//二叉树的中序线索化
typedef struct ThreadNode {
	int data;
	struct ThreadNode* lchild, * rchild;
	int ltag, rtag;//左、右线索标志
}ThreadNode,*ThreadTree;

//二叉树的初始化
void InitTree(ThreadTree& T) {
	T->lchild = NULL;
	T->rchild = NULL;
}

//创建二叉树
ThreadNode* CreateBiTree(ThreadTree& T) {
	int n;
	scanf("%d", &n);
	if (n == 9999)
		T = NULL;
	else {
		if (!(T = (ThreadNode*)malloc(sizeof(ThreadNode))))
			exit(OVERFLOW);//内存分配失败则退出
		T->data = n;
		T->ltag = 0, T->rtag = 0;//初始化左右线索标志
		CreateBiTree(T->lchild);
		CreateBiTree(T->rchild);
	}
}

//非线索二叉树的中序遍历
void InorderBiThree(ThreadTree T) {//递归算法实现中序遍历
	if (T != NULL) {
		InorderBiThree(T->lchild);//递归遍历左子树
		printf("%d ",T->data);//访问根结点
		InorderBiThree(T->rchild);//递归遍历右子树
	}
}

//将已创建的二叉树线索化
ThreadNode* pre = NULL;//全局变量pre，指向当前访问结点的前驱
void visit(ThreadNode* q) {//根结点的访问
	if (q->lchild == NULL) {//左子树为空，建立前驱线索
		q->lchild = pre;
		q->ltag = 1;
	}
	if (pre != NULL && pre->rchild == NULL) {
		pre->rchild = q;//建立前驱结点的后继线索
		pre->rtag = 1;
	}
	pre = q;
}
void InThread(ThreadTree T) {//中序线索化二叉树，一边遍历一边线索化
	if (T != NULL) {
		InThread(T->lchild);//中序遍历左子树
		visit(T);//访问根结点
		InThread(T->rchild);//中序遍历右子树
	}
}
void CreateInThread(ThreadTree T) {//中序线索化二叉树操作
	pre = NULL;
	if (T != NULL) {
		InThread(T);
		if (pre->rchild == NULL)
			pre->rtag = 1;//处理遍历的最后一个结点
	}
}

//线索二叉树的遍历
ThreadNode* Firstnode(ThreadNode* p) {//找到以p为树根的子树中，第一个被中序遍历的结点
	while (p->ltag == 0)//循环找到最左下结点
		p = p->lchild;
	return p;
}
ThreadNode* Nextnode(ThreadNode* p) {//在中序线索二叉树中找到结点p的后继结点
	if (p->rtag == 0)
		return Firstnode(p->rchild);
	else
		return p->rchild;
}
void Inorder(ThreadNode* T) {//对中序线索二叉树进行中序遍历
	for (ThreadNode* p = Firstnode(T); p != NULL; p = Nextnode(p))
		printf("%d ", p->data);
}
ThreadNode* Lastnode(ThreadNode* p) {//找到以p为树根的子树中，最后一个被中序遍历的结点
	while (p->rtag == 0)//循环找到最右下结点
		p = p->rchild;
	return p;
}
ThreadNode* Prenode(ThreadNode* p) {//在中序线索二叉树中找到结点p的前驱结点
	if (p->ltag == 0)
		return Lastnode(p->lchild);
	else
		return p->lchild;
}
void RevInorder(ThreadNode* T) {//对中序线索二叉树进行中序遍历
	for (ThreadNode* p = Lastnode(T); p != NULL; p = Prenode(p))
		printf("%d ", p->data);
}

//测试
void testThreadTree() {
	ThreadTree T;
	T = (ThreadTree)malloc(sizeof(ThreadTree));
	InitTree(T);
	printf("请输入线索二叉树的元素：\n");
	CreateBiTree(T);//创建二叉树
	printf("\n中序遍历为：\n");//检测是否创建成功
	InorderBiThree(T);//中序遍历
	CreateInThread(T);//线索化
	printf("\n线索二叉树的中序遍历为：\n");
	Inorder(T);
	printf("\n线索二叉树的逆向中序遍历为：\n");
	RevInorder(T);
}

/*6 5 8 4 9999 9999 9999 3 9999 9999 1 2 9999 9999 9999

中序遍历为：
4 8 5 3 6 2 1
线索二叉树的中序遍历为：
4 8 5 3 6 2 1
线索二叉树的逆向中序遍历为：
1 2 6 3 5 8 4
*/

int main() {
	testThreadTree();
	return 0;
}