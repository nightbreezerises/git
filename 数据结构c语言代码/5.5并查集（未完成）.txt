#include<iostream>
#include<cstdlib>
#include<vector>
#include<stack>
#include<cmath>

using std::cout;
using std::cin;
using std::endl;
using std::string;
using std::stack;
using std::vector;


#define SIZE 20

int UFSets[SIZE];

void Initial(int S[]) {
	for (int i = 0; i < SIZE; ++i)
		S[i] = -1;//-1代表根结点
}

//并查集
#ifdef _UF
int _Find(int S[], int x) {
	while (S[x] >= 0)
		x = S[x];
	return x;
}

int _Union(int S[], int root1, int root2) {
	if (root1 == root2)
		return;
	S[root2] = root1;
}

#endif

//并查集的优化
//查操作
int Find(int S[], int x) {
	int root = x;
	while (S[root] >= 0)//寻找根结点
		root = S[root];
	while (x != root) {
		int t = S[x];
		S[x] = root;//将x直接挂到根结点下
		x = t;
	}
	return root;//返回根结点编号
}

//并操作，小树合并到大树
void Union(int S[], int root1, int root2) {
	if (root1 == root2)
		return;
	if (S[root2] > S[root1]) {
		S[root1] += S[root2];//累加结点总数，如-5代表该并查集有5个结点
		S[root2] = root1;//小树合并到大树
	}
	else {
		S[root2] += S[root1];
		S[root1] = root2;
	}
}

int main() {

}




