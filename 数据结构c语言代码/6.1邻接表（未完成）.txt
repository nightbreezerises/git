#include<iostream>
#include<cmath>
#include<typeinfo>
#include<vector>
#include<queue>

using std::cout;
using std::cin;
using std::endl;
using std::vector;
using std::queue;


//typedef int InfoType;//权值类型
//边表结点
typedef struct ArcNode {
	int adjvex;//该弧所指向的顶点的位置
	struct ArcNode* next;//指向下一条弧的指针
	//InfoType info;//网的边权值
}ArcNode;
//顶点表结点
typedef struct VNode {
	int data;//顶点信息
	ArcNode* first;//指向第一条依附于该顶点的弧的指针
}VNode;
typedef struct {
	vector<VNode>vertices;//邻接表顶点(vertix复数vertices)
	int vexnum, arcnum;//图的顶点数和弧数
}ALGraph;

/*图的基本操作：
Adjacent(G,x,y):判断图G是否存在边<x, y>或(x, y)。
Neighbors(G,x):列出图G中与结点x邻接的边。
lnsertVertex(G,x):在图G中插入顶点x。
DeleteVertex(G,x):从图G中删除顶点x。
AddEdge(G,x,y):若无向边(x, y)或有向边<x, y>不存在，则向图G中添加该边。
RemoveEdge(G,x,y):若无向边(x,y)或有向边<x, y>存在,则从图G中删除该边。
FirstNeighbor(G,x):求图G中顶点x的第一个邻接点，若有则返回顶点号。若x没有邻接点或图中不存在x，则返回-1。
NextNeighbor(G,x,y):假设图G中顶点y是顶点x的一个邻接点，返回除y之外顶点x的下一个邻接点的顶点号，若y是x的最后一个邻接点，则返回-1。
Get_edge_value(G,x,y):获取图G中边(x, y)或<x, y>对应的权值。
Set_edge_value(G,x,y,v):设置图G中边(x, y)或<x, y>对应的权值为v。

此外，还有图的遍历算法，包括深度优先遍历和广度优先遍历
*/



//图的初始化
void InitGraph(ALGraph& G) {
	G.vexnum = 0;//初始化顶点数，边数为0
	G.arcnum = 0;
}



bool Adjacent(ALGraph G, int x, int y);//判断图G是否存在边<x, y>或(x, y)。
vector<int>Neighbors(ALGraph G, int x);//列出图G中与结点x邻接的边。

bool lnsertVertex(ALGraph& G, int data); //在图G中插入顶点x。
bool DeleteVertex(ALGraph& G, int x, int& data); //从图G中删除顶点x。

bool AddEdge(ALGraph& G, int x, int y); //若无向边(x, y)或有向边<x, y>不存在，则向图G中添加该边。
bool RemoveEdge(ALGraph& G, int x, int y); //若无向边(x, y)或有向边<x, y>存在, 则从图G中删除该边。

int FirstNeighbor(ALGraph G, int x); //求图G中顶点x的第一个邻接点，若有则返回顶点号。若x没有邻接点或图中不存在x，则返回 - 1。
int NextNeighbor(ALGraph G, int x, int y); //假设图G中顶点y是顶点x的一个邻接点，返回除y之外顶点x的下一个邻接点的顶点号，若y是x的最后一个邻接点，则返回 - 1。

//int Get_edge_value(ALGraph G, int x, int y); //获取图G中边(x, y)或<x, y>对应的权值。
//bool Set_edge_value(ALGraph& G, int x, int y, int v); //设置图G中边(x, y)或<x, y>对应的权值为v。




//判断图G是否存在边<x, y>或(x, y)。
bool Adjacent(ALGraph G, int x, int y) {
	for (ArcNode* p = G.vertices[x].first; p != NULL; p = p->next)
		if (p->adjvex = y)
			return true;
	return false;
}
//列出图G中与结点x邻接的边。
vector<int>Neighbors(ALGraph G, int x) {
	vector<int>A;
	for (ArcNode* p = G.vertices[x].first; p != NULL; p = p->next)
		A.push_back(p->adjvex);
	return A;
}

//在图G中插入顶点x。
bool lnsertVertex(ALGraph& G, int data) {
	G.vertices[G.vexnum].data = data;
	G.vexnum++;
	return true;
}
//从图G中删除顶点x。
bool DeleteVertex(ALGraph& G, int x, int& data) {
	ArcNode* r;
	for (ArcNode* p = G.vertices[x].first; p != NULL; ) {
		r = p;
		p = p->next;
		free(r);
	}
	G.vexnum--;
	return true;
}

//若无向边(x, y)或有向边<x, y>不存在，则向图G中添加该边。
bool AddEdge(ALGraph& G, int x, int y) {
	ArcNode* s = (ArcNode*)malloc(sizeof(ArcNode));
	s->adjvex = x;
	s->next = G.vertices[x].first->next;
	G.vertices[x].first = s;
	return true;
}
//若无向边(x, y)或有向边<x, y>存在, 则从图G中删除该边。
bool RemoveEdge(ALGraph& G, int x, int y) {
	ArcNode* r;
	if (G.vertices[x].first->adjvex == y) {
		r = G.vertices[x].first;
		G.vertices[x].first = r->next;
		free(r);
	}
	for (ArcNode* p = G.vertices[x].first; p->next != NULL; p = p->next)
		if (p->next->adjvex == y) {
			r = p->next;
			p->next = r->next;
			free(r);
			return true;
		}
	return false;
}

//求图G中顶点x的第一个邻接点，若有则返回顶点号。若x没有邻接点或图中不存在x，则返回 - 1。
int FirstNeighbor(ALGraph G, int x) {
	for (int i = 0; i < G.vexnum; ++i)
		if (G.vertices[x].first)
			return G.vertices[x].first->adjvex;
	return -1;
}
//假设图G中顶点y是顶点x的一个邻接点，返回除y之外顶点x的下一个邻接点的顶点号，若y是x的最后一个邻接点，则返回 - 1。
int NextNeighbor(ALGraph G, int x, int y) {
	for (ArcNode* p = G.vertices[x].first; p != NULL; p = p->next) {
		if (p->adjvex == y)
			return p->next->adjvex;
	}
	return -1;
}




//访问结点
void visit(ALGraph G, int v) {
	cout << G.vertices[v].data << endl;
}
//广度优先遍历算法
vector<int>visited;//访问标记数组
queue<int>Q;
//广度优先遍历
void BFS(ALGraph G, int v) {//从顶点v出发广度优先遍历图G
	visit(G, v);//访问初始顶点v
	visited[v] = true;//对v作已访问标记
	Q.push(v);//顶点v入队列Q
	while (!Q.empty()) {
		v = Q.front();
		Q.pop();;//若队列非空顶点v出队列Q
		for (int w = FirstNeighbor(G, v); w >= 0; w = NextNeighbor(G, v, w))
			if (!visited[w]) {//w为v的尚未访问的邻接结点
				visit(G, w);//访问顶点w
				visited[w] = true;//对w做已访问标记
				Q.push(w);//顶点w入队列
			}
	}
}
//BFS算法
void BFSTraverse(ALGraph G) {
	visited.resize(G.vexnum);
	for (int i = 0; i < G.vexnum; ++i)
		visited[i] = false;
	//InitQuene(Q);
	for (int i = 0; i < G.vexnum; ++i)
		if (!visited[i])
			BFS(G, i);
}

//深度优先遍历算法
void DFS(ALGraph G, int v) {//从顶点v出发，深度优先遍历图G
	visit(G, v);//访问顶点v
	visited[v] = true;//设已访问标记
	for (int w = FirstNeighbor(G, v); w >= 0; w = NextNeighbor(G, v, w))
		if (!visited[w]) {//w为u的尚未访问的邻接顶点
			DFS(G, w);
		}
}
void DFSTraverse(ALGraph G) {//对图G进行深度优先遍历
	visited.resize(G.vexnum);
	for (int v = 0; v < G.vexnum; ++v)
		visited[v] = false;//初始化已访问标记数据
	for (int v = 0; v < G.vexnum; ++v)//本代码中是从v=0开始遍历
		if (!visited[v])
			DFS(G, v);
}

/*
typedef struct {
	int Vex[MaxVertexNum];//顶点(vertex)表
	bool Edge [MaxVertexNum][MaxVertexNum];//邻接矩阵，边表
	int vernum, arcnum;//图的当前顶点(vertex)数，弧(arc)数
}MGraph;
*/

//创建图
ALGraph CreateGraph(ALGraph G) {

}

//测试
void testMGraph() {

}

int main() {
	void testMGraph();
	return 0;
}
